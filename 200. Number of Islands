class Solution {
public:
    bool visited[300][300];
    int n, m;
    vector<pair<int, int>> path = {{-1, 0}, {1, 0}, {0, 1}, {0, -1}};

    bool isValid(int cI, int cJ) {
        if (cI >= 0 && cI < n && cJ >= 0 && cJ < m)
            return true;
        else
            return false;
    }

    void dfs(int si, int sj, vector<vector<char>>& grid) {
        visited[si][sj] = true;

        for (pair<int, int> p : path) {
            int ni = si + p.first;
            int nj = sj + p.second;
            if (isValid(ni, nj) && grid[ni][nj] == '1' && !visited[ni][nj]) {
                dfs(ni, nj, grid);
            }
        }
    }

    int numIslands(vector<vector<char>>& grid) {
        if (grid.empty() || grid[0].empty()) {
            return 0;
        }

        n = grid.size();
        m = grid[0].size();
        int numIslands = 0;

        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < m; ++j) {
                if (grid[i][j] == '1' && !visited[i][j]) {
                    ++numIslands;
                    dfs(i, j, grid);
                }
            }
        }

        return numIslands;
    }
};
